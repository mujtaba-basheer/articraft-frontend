/* tslint:disable */
/* eslint-disable */
/**
 * LoopTrack-Server
 * LoopTrack Backend
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base";

/**
 *
 * @export
 * @interface SignInRequestDto
 */
export interface SignInRequestDto {
  /**
   * Email
   * @type {string}
   * @memberof SignInRequestDto
   */
  email: string;
  /**
   * Password
   * @type {string}
   * @memberof SignInRequestDto
   */
  password: string;
}
/**
 *
 * @export
 * @interface SignInResponseDto
 */
export interface SignInResponseDto {
  /**
   * Access token
   * @type {string}
   * @memberof SignInResponseDto
   */
  accessToken: string;
  /**
   * Email
   * @type {string}
   * @memberof SignInResponseDto
   */
  email: string;
  /**
   * Is email verified?
   * @type {boolean}
   * @memberof SignInResponseDto
   */
  emailVerified: boolean;
  /**
   * First name
   * @type {string}
   * @memberof SignInResponseDto
   */
  firstName: string;
  /**
   * User ID
   * @type {string}
   * @memberof SignInResponseDto
   */
  id: string;
  /**
   * Last name
   * @type {string}
   * @memberof SignInResponseDto
   */
  lastName: string;
  /**
   * Is Meta account connected?
   * @type {boolean}
   * @memberof SignInResponseDto
   */
  metaConnected: boolean;
  /**
   * Is Shopify account connected?
   * @type {boolean}
   * @memberof SignInResponseDto
   */
  shopifyConnected: boolean;
}
/**
 *
 * @export
 * @interface SignupRequestDto
 */
export interface SignupRequestDto {
  /**
   * Email
   * @type {string}
   * @memberof SignupRequestDto
   */
  email: string;
  /**
   * First name
   * @type {string}
   * @memberof SignupRequestDto
   */
  firstName: string;
  /**
   * Last name
   * @type {string}
   * @memberof SignupRequestDto
   */
  lastName: string;
  /**
   * Password
   * @type {string}
   * @memberof SignupRequestDto
   */
  password: string;
  /**
   * Phone number
   * @type {string}
   * @memberof SignupRequestDto
   */
  phoneNumber?: string;
  /**
   * Phone prefix
   * @type {string}
   * @memberof SignupRequestDto
   */
  phonePrefix?: string;
}
/**
 *
 * @export
 * @interface SignupResponseDto
 */
export interface SignupResponseDto {
  /**
   * Created at timestamp
   * @type {string}
   * @memberof SignupResponseDto
   */
  createdAt: string;
  /**
   * Email
   * @type {string}
   * @memberof SignupResponseDto
   */
  email: string;
  /**
   * Is email verified?
   * @type {boolean}
   * @memberof SignupResponseDto
   */
  emailVerified: boolean;
  /**
   * First name
   * @type {string}
   * @memberof SignupResponseDto
   */
  firstName: string;
  /**
   * User ID
   * @type {string}
   * @memberof SignupResponseDto
   */
  id: string;
  /**
   * Last name
   * @type {string}
   * @memberof SignupResponseDto
   */
  lastName: string;
  /**
   * Is Meta account connected?
   * @type {boolean}
   * @memberof SignupResponseDto
   */
  metaConnected: boolean;
  /**
   * Phone number
   * @type {string}
   * @memberof SignupResponseDto
   */
  phoneNumber?: string;
  /**
   * Phone prefix
   * @type {string}
   * @memberof SignupResponseDto
   */
  phonePrefix?: string;
  /**
   * Is Shopify account connected?
   * @type {boolean}
   * @memberof SignupResponseDto
   */
  shopifyConnected: boolean;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {SignInRequestDto} signInRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn: async (
      signInRequestDto: SignInRequestDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signInRequestDto' is not null or undefined
      assertParamExists("signIn", "signInRequestDto", signInRequestDto);
      const localVarPath = `/api/auth/signin`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signInRequestDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SignupRequestDto} signupRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup: async (
      signupRequestDto: SignupRequestDto,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signupRequestDto' is not null or undefined
      assertParamExists("signup", "signupRequestDto", signupRequestDto);
      const localVarPath = `/api/auth/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signupRequestDto,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    AuthControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {SignInRequestDto} signInRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signIn(
      signInRequestDto: SignInRequestDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<SignInResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signIn(
        signInRequestDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthControllerApi.signIn"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {SignupRequestDto} signupRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signup(
      signupRequestDto: SignupRequestDto,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<SignupResponseDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signup(
        signupRequestDto,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["AuthControllerApi.signup"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = AuthControllerApiFp(configuration);
  return {
    /**
     *
     * @param {SignInRequestDto} signInRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signIn(
      signInRequestDto: SignInRequestDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SignInResponseDto> {
      return localVarFp
        .signIn(signInRequestDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SignupRequestDto} signupRequestDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signup(
      signupRequestDto: SignupRequestDto,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SignupResponseDto> {
      return localVarFp
        .signup(signupRequestDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
  /**
   *
   * @param {SignInRequestDto} signInRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthControllerApi
   */
  public signIn(
    signInRequestDto: SignInRequestDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthControllerApiFp(this.configuration)
      .signIn(signInRequestDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SignupRequestDto} signupRequestDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AuthControllerApi
   */
  public signup(
    signupRequestDto: SignupRequestDto,
    options?: RawAxiosRequestConfig,
  ) {
    return AuthControllerApiFp(this.configuration)
      .signup(signupRequestDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHello(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getHello(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["DefaultApi.getHello"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DefaultApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
      return localVarFp
        .getHello(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public getHello(options?: RawAxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .getHello(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
